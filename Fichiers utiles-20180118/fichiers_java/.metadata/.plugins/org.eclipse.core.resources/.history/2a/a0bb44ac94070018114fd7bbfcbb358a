package fichierFournis;

import javax.swing.plaf.synth.SynthSeparatorUI;

class Test
{
   static boolean visite[];
   public static void dfs(Graph g, int u)
	 {
		visite[u] = true;
		System.out.println("Je visite " + u);
		for (Edge e: g.next(u))
		  if (!visite[e.to])
			dfs(g,e.to);
	 }

   public static void testHeap()
	 {
		// Crée ue file de priorité contenant les entiers de 0 à 9, tous avec priorité +infty
		Heap h = new Heap(10);
		h.decreaseKey(3,1664);
		h.decreaseKey(4,5);
		h.decreaseKey(3,8);
		h.decreaseKey(2,3);
		// A ce moment, la priorité des différents éléments est:
		// 2 -> 3
		// 3 -> 8
		// 4 -> 5
		// tout le reste -> +infini
		int x=  h.pop();
		System.out.println("On a enlevé "+x+" de la file, dont la priorité était " + h.priority(x));
		x=  h.pop();
		System.out.println("On a enlevé "+x+" de la file, dont la priorité était " + h.priority(x));
		x=  h.pop();
		System.out.println("On a enlevé "+x+" de la file, dont la priorité était " + h.priority(x));
		// La file contient maintenant uniquement les éléments 0,1,5,6,7,8,9 avec priorité +infini
	 }
   
   public static void testGraph()
	 {
		int n = 5;
		int i,j;
		Graph g = new Graph(n*n+2);
		
		for (i = 0; i < n-1; i++)
		  for (j = 0; j < n ; j++)
			g.addEdge(new Edge(n*i+j, n*(i+1)+j, 1664 - (i+j)));

		for (j = 0; j < n ; j++)		  
		  g.addEdge(new Edge(n*(n-1)+j, n*n, 666));
		
		for (j = 0; j < n ; j++)					
		  g.addEdge(new Edge(n*n+1, j, 0));
		
		g.addEdge(new Edge(13,17,1337));
		g.writeFile("test.dot");
		// dfs à partir du sommet 3
		visite = new boolean[n*n+2];
		dfs(g, 3);
	 }
   public static void testWritepgm(){
	   SeamCarving.writepgm(SeamCarving.readpgm("ex1.pgm"), "test1.pgm");
	   System.out.println("test : creation test1.pgm");
   }
   
   public static void testInterest(){
	   int[][] test;// = new int[376][476];
	   test = SeamCarving.interest(SeamCarving.readpgm("test.pgm"));
	   SeamCarving.writepgm(test, "Test$.pgm");
	   for (int i=0; i<test.length;i++){
		   for(int j =0; j<test[0].length;j++){
			   
		   
		   System.out.print("["+test[i][j]+"]");
		   }
		   System.out.println("");
	   }
	
   }
   public static void testTographe(){
	   int[][] test = SeamCarving.interest(SeamCarving.readpgm("test.pgm"));
	   System.out.println("taille test[] : "+test.length+"\n" +
	   		"taille test[][] :"+test[0].length);
	   Graph g = SeamCarving.tograph(test);
	   g.writeFile("testpgm.dot");
	   
   }
   public static void testDijkstra(){
	  int x;
	   int y =0;
	   Graph g;
	   int[][] image = SeamCarving.readpgm("test.pgm");
	   int[][] test = SeamCarving.interest(image);
	   int hauteur = test.length;
	   int largeur = test[0].length;
	   int n = hauteur*largeur+2;
	   int[] tDijkstra = new int[n];
	   int[][] nouvelleImage = new int[hauteur][largeur];
	   //for(int w = 0; w < 500 ;w++) {
	   g = SeamCarving.tograph(test);
	   tDijkstra = SeamCarving.dijkstra(g, g.vertices()-1, g.vertices()-2);
	   x = tDijkstra.length-1;
	   for (int i=0; i<tDijkstra.length;i++){
		   System.out.println("["+tDijkstra[i]+"]");
	   }
	   //System.out.println("largeur = "+largeur+"\nhauteur = "+hauteur);
	   for(int i =0 ; i< hauteur-1;i++) {
		   //System.out.println("i = "+i);
		   for(int j =0 ; j< largeur;j++) {
			   //System.out.println("\tj = "+j);
			   //System.out.println("\ttDijkstra = "+tDijkstra[x]);
			   if(!((i*largeur+j)== tDijkstra[x])) {
				  // System.out.println("\t\tdans le if, y =" +y);
				   
				   nouvelleImage[i][y] = image[i][j];
				   //System.out.println("\\t\\tdans le if, apres nouvelle image");
				   y += 1;
				   
				   y = y%largeur;
				   System.out.println("\t\ty ="+y);
				   if(x>0) {
					   
				   x -=1;}
				   
			   }
		   }
		   
	   }
	  // }
	   System.out.println("taille image initial (hauteur * largeur) : "+hauteur+" * "+largeur);
	 SeamCarving.writepgm(nouvelleImage, "testDi.pgm");
	 for (int i=0; i<image.length;i++){
		   for(int j =0; j<image[0].length;j++){
			   
		   
		   System.out.print("["+image[i][j]+"]");
		   }
		   System.out.println("");
	   }
	 
	 hauteur = nouvelleImage.length;
	 largeur = nouvelleImage[0].length;
	 System.out.println("nouvelle image créée!!");
	 for (int i=0; i<nouvelleImage.length;i++){
		   for(int j =0; j<nouvelleImage[0].length;j++){
			   
		   
		   System.out.print("["+nouvelleImage[i][j]+"]");
		   }
		   System.out.println("");
	   }
	 System.out.println("taille image final  (hauteur * largeur) : "+hauteur+" * "+largeur);
   }
   public static void main(String[] args)
	 {
		//testHeap();
		//testGraph();
		//testWritepgm();
	   testInterest();
		//testTographe();
	   testDijkstra();
	 }
}
