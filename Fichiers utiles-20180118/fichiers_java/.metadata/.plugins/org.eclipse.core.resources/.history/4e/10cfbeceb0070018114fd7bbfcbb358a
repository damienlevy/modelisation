package fichierFournis;

import java.util.ArrayList;

import javax.swing.plaf.synth.SynthSeparatorUI;

import logiciel.TraitementImage;

class Test
{
   static boolean visite[];
   public static void dfs(Graph g, int u)
	 {
		visite[u] = true;
		System.out.println("Je visite " + u);
		for (Edge e: g.next(u))
		  if (!visite[e.to])
			dfs(g,e.to);
	 }

   public static void testHeap()
	 {
		// Crée ue file de priorité contenant les entiers de 0 à 9, tous avec priorité +infty
		Heap h = new Heap(10);
		h.decreaseKey(3,1664);
		h.decreaseKey(4,5);
		h.decreaseKey(3,8);
		h.decreaseKey(2,3);
		// A ce moment, la priorité des différents éléments est:
		// 2 -> 3
		// 3 -> 8
		// 4 -> 5
		// tout le reste -> +infini
		int x=  h.pop();
		System.out.println("On a enlevé "+x+" de la file, dont la priorité était " + h.priority(x));
		x=  h.pop();
		System.out.println("On a enlevé "+x+" de la file, dont la priorité était " + h.priority(x));
		x=  h.pop();
		System.out.println("On a enlevé "+x+" de la file, dont la priorité était " + h.priority(x));
		// La file contient maintenant uniquement les éléments 0,1,5,6,7,8,9 avec priorité +infini
	 }
   
   public static void testGraph()
	 {
		int n = 5;
		int i,j;
		Graph g = new Graph(n*n+2);
		
		for (i = 0; i < n-1; i++)
		  for (j = 0; j < n ; j++)
			g.addEdge(new Edge(n*i+j, n*(i+1)+j, 1664 - (i+j)));

		for (j = 0; j < n ; j++)		  
		  g.addEdge(new Edge(n*(n-1)+j, n*n, 666));
		
		for (j = 0; j < n ; j++)					
		  g.addEdge(new Edge(n*n+1, j, 0));
		
		g.addEdge(new Edge(13,17,1337));
		g.writeFile("test.dot");
		// dfs à partir du sommet 3
		visite = new boolean[n*n+2];
		dfs(g, 3);
	 }
   public static void testWritepgm(){
	   SeamCarving.writepgm(SeamCarving.readpgm("ex1.pgm"), "test1.pgm");
	   System.out.println("test : creation test1.pgm");
   }
   
   public static void testInterest(){
	   int[][] test;// = new int[376][476];
	   test = SeamCarving.interest(SeamCarving.readpgm("testfeep.pgm"));
	   SeamCarving.writepgm(test, "Testfeeep.pgm");
	   for (int i=0; i<test.length;i++){
		   for(int j =0; j<test[0].length;j++){
			   
		   
		   System.out.print("["+test[i][j]+"]");
		   }
		   System.out.println("");
	   }
	
   }
   public static void testTographe(){
	   int[][] test = SeamCarving.interest(SeamCarving.readpgm("test.pgm"));
	   System.out.println("taille test[] : "+test.length+"\n" +
	   		"taille test[][] :"+test[0].length);
	   Graph g = SeamCarving.tograph(test);
	   g.writeFile("testpgm.dot");
	   
   }
   
   
   /**
    * 
    * 
    * @param image image a traiter
    * @return
    */
   public static ArrayList<Integer> traitementColone(int[][] image) {
	   
	   ArrayList<Integer> quovadis = new ArrayList<>();
	   Graph g;
	   ArrayList<Integer> tDijkstra = new ArrayList<>();
	   int hauteur = image.length;
	   int largeur = image[0].length;
	   int y;
	   int[][] test = SeamCarving.interest(image);
	   g=SeamCarving.tograph(test);
	   tDijkstra = SeamCarving.dijkstra(g, g.vertices()-1, g.vertices()-2);
	   for(int i = 0; i<hauteur;i++) {
		   //test tDijkstra
		   //System.out.println("tDijkstra["+i+"] ="+tDijkstra.get(hauteur-i-1));
		   
		   for(int j = 0 ;j< largeur ; j++) {
		   	   y = i*largeur+j;
			   System.out.println("\t i*largeur+j="+y);
		   
			   if(!(y == tDijkstra.get(hauteur-i-1))) {
				   quovadis.add(image[i][j]);
		   
			   }//fin if
		   }//fin for largeur
   
	   }//fin for hauteur
	   return quovadis;
   }
   public static int[][] arrayListToTabImage(ArrayList<Integer> image, int hauteur){
	   int largeur = image.size()/hauteur;
	   int[][] nouvelleImage = new int[hauteur][largeur];
	   nouvelleImage = new int[hauteur][largeur];
	   for(int i = 0; i<hauteur; i++) {
		   //System.out.println("nouvelle image i="+i);
		   for(int j = 0; j<largeur ; j++) {
			  // System.out.println("nouvelle image j="+j);
			   //System.out.println(i*largeur+j);
			   
			   nouvelleImage[i][j] = image.get(i*3+j);
		   }
	   }
	   return nouvelleImage;
   }
   
   public static void testDijkstra(){
		  
	   int pixelSuppr=2;
		   int y =0;
		   
		   int[][] image = SeamCarving.readpgm("test.pgm");
		   int[][] nouvelleImage;
		   int hauteur = image.length;
		   int largeur = image[0].length;
		   int n = hauteur*largeur+2;
		   
		   ArrayList<Integer> quovadis = new ArrayList<>();
		   
		   System.out.println("taille image initial (hauteur * largeur) : "+hauteur+" * "+largeur);
		   
		   quovadis = traitementColone(image);
		   nouvelleImage = arrayListToTabImage(quovadis, hauteur);

		   
		   largeur = quovadis.size()/hauteur;
		   System.out.println("quoquo/hauteur="+largeur);
		   
		   
		   for(int pilote = 0 ; pilote < pixelSuppr ; pilote++ ) {
			   
		   
			   
			   
			   
			   //test = SeamCarving.interest(image);
		   }//fin for pilote
		   
		   
		   
		   /*for(int w = 0; w < 150 ;w++) {
			   g = SeamCarving.tograph(test);
			   tDijkstra = SeamCarving.dijkstra(g, g.vertices()-1, g.vertices()-2);
			   //x = tDijkstra.length-1;
			  // for (int i=0; i<tDijkstra.length;i++){
				   //System.out.println("["+tDijkstra[i]+"]");
			   //}
			   //System.out.println("tdjikstra = "+tDijkstra.length);
			   //System.out.println("largeur = "+largeur+"\nhauteur = "+hauteur);
			  // x = 0;
		   
			   
			   for(int i =0 ; i<hauteur ;i++) {
				   //System.out.println("i = "+i);
				
				   y=0;
				   
				   for(int j =0 ; j< largeur;j++) {
					   //System.out.println("\tj = "+j);
					   //System.out.println("\ttDijkstra = "+tDijkstra[x]);
					   
					   if(!((i*largeur+j)== tDijkstra[i])) {
						   //xxx = x*largeur+j;
						
						   //System.out.println("\t\t tDijkstra[i] " + tDijkstra[i]);
						   //System.out.println("\t\t i*largeur+j " + xxx);
						   nouvelleImage[i][y] = image[i][j];
						   //System.out.println("\\t\\tdans le if, apres nouvelle image");
						   y += 1;
						   //System.out.println("\t\ty ="+y);
						   //  if(x>0) {
						   // x -=1;}
					   }
				   }
			  
				 //  x +=1;
			   }
			   test = SeamCarving.interest(nouvelleImage);
		   }*/
		   String nom = "copieEx1.pgm";
		   
		 
		   SeamCarving.writepgm(nouvelleImage, nom);//ecriture de l'image
		 //copie du tableau de l'image initial
		
		   afficheTableau(image);

		   hauteur = nouvelleImage.length;
		   largeur = nouvelleImage[0].length;
		   System.out.println("nouvelle image créée!! ");
		   System.out.println("nom : "+nom);
		 
		 
		 //copie du tableau de l'image créée
		afficheTableau(nouvelleImage);
		   System.out.println("taille image final  (hauteur * largeur) : "+hauteur+" * "+largeur);
   }
   
    static void afficheTableau(int[][]tab) {
	   for (int i=0; i<tab.length;i++){
		   for(int j =0; j<tab[0].length;j++){
			   
		   
		   System.out.print("["+tab[i][j]+"]");
		   }
		   System.out.println("");
	   }
   }
   public static void main(String[] args)
	 {
		//testHeap();
		//testGraph();
		//testWritepgm();
	   testInterest();
		//testTographe();
	   testDijkstra();
	 }
}
